#!/bin/bash
#SBATCH --job-name=data-proc
#SBATCH --partition=gpu-a40
#SBATCH --account=cse
#SBATCH --nodes=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=48G
#SBATCH --gres=gpu:1
#SBATCH --time=1-0:00:00
#SBATCH --mail-type=ALL
#SBATCH --mail-user=tjung2@uw.edu
#SBATCH --dependency=afterany:6700270

# I use source to initialize conda into the right environment.
cat $0
echo "--------------------"

source ~/.bashrc
conda activate ckl


# python run.py --config configs/wmt/training/t5_baseline_full.json
# python run.py --config configs/wmt/training/t5_kadapters_soft_full.json -lr 0.01
# python run.py --config configs/templama/training/t5_baseline_full.json -lr 0.000003 -checkpoint_path outputs/templamabaseline_full/epoch=4-f1_score=0.209-em_score=0.074.ckpt
# python run.py --config configs/templama/training/t5_kadapters_yearly_large.json -lr 0.001
# python run.py --config configs/templama/training/t5_kadapters_yearly_large.json -lr 0.0005
# python run.py --config configs/templama/training/t5_kadapters_yearly_large.json -lr 0.00001
# python run.py --config configs/templama/training/t5_kadapters_yearly_large_256.json -lr 0.0003
# python run.py --config configs/wmt/training/t5_baseline_full.json -val_data 2010

python run.py --config configs/wmt/training/t5_kadapters_yearly_small.json -datav 2007
python run.py --config configs/wmt/training/t5_kadapters_yearly_small.json -datav 2008

# WMT -> Templama
# python run.py --config configs/templama/training/t5_baseline_full.json -checkpoint_path outputs/wmtbaseline_full/epoch=0-f1_score=0.2127-em_score=0.1783.ckpt -lr 0.0001
# python run.py --config configs/templama/training/t5_kadapters_yearly_2freeze.json -checkpoint_path outputs/wmtkadapter_2010_0freeze_158_128/epoch=1-f1_score=0.2236-em_score=0.1878.ckpt -lr 0.003
# python run.py --config configs/templama/training/t5_kadapters_yearly_2freeze.json -checkpoint_path outputs/wmtkadapter_2010_2freeze_158_128/epoch=1-f1_score=0.208-em_score=0.173.ckpt -lr 0.003
# python run.py --config configs/templama/training/t5_kadapters_soft_full.json -checkpoint_path outputs/wmtkadapter_soft_full_0freeze_158_128/epoch=0-f1_score=0.1717-em_score=0.1419.ckpt
# python run.py --config configs/templama/training/t5_kadapters_soft_full.json -checkpoint_path outputs/wmtkadapter_soft_full_2freeze_158_128/epoch=0-f1_score=0.185-em_score=0.154.ckpt

# WMT baseline -> WMT adapters
# python run.py --config configs/wmt/training/t5_kadapters_soft_full.json -checkpoint_path outputs/wmtbaseline_full/epoch=0-f1_score=0.178-em_score=0.149.ckpt
# python run.py --config configs/wmt/training/t5_kadapters_yearly_2freeze.json -checkpoint_path outputs/wmtbaseline_full/epoch=0-f1_score=0.178-em_score=0.149.ckpt

# WMT -> SituatedQA
# python run.py --config configs/situatedqa/training/t5_baseline_full.json -checkpoint_path outputs/wmtbaseline_full/epoch=0-f1_score=0.2127-em_score=0.1783.ckpt -lr 0.00001
# python run.py --config configs/situatedqa/training/t5_kadapters_soft_yearly_2freeze.json -checkpoint_path outputs/wmtkadapter_soft_full_2freeze_158_128/epoch=0-f1_score=0.185-em_score=0.154.ckpt

# Preprocess data
# python preprocess_nyt_data.py 2010 -end_date=2020
# python preprocess_nyt_data_full.py

# NYT -> Templama
# python run.py --config configs/templama/training/t5_kadapters_yearly_2freeze.json -checkpoint_path outputs/nytkadapter_2010_0freeze_158_128/epoch=8-f1_score=0.140-em_score=0.100.ckpt

# NYT -> SituatedQA
# python run.py --config configs/situatedqa/training/t5_kadapters_yearly2freeze.json -checkpoint_path outputs/nytkadapter_2010_0freeze_158_128/epoch=8-f1_score=0.140-em_score=0.100.ckpt

# python run.py --config configs/wmt/training/t5_kadapters_yearly.json -datav 2010
# python run.py --config configs/templama/evaluation/t5_baseline_full.json -val_data 2020--------------------
wandb: Currently logged in as: tjung2. Use `wandb login --relogin` to force relogin
wandb: wandb version 0.13.4 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.13.1
wandb: Run data is saved locally in /mmfs1/gscratch/ark/tjung2/continual-knowledge-learning/wandb/run-20221103_051513-voc7h397
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run kadapter_2007
wandb: ‚≠êÔ∏è View project at https://wandb.ai/tjung2/temporal_questions
wandb: üöÄ View run at https://wandb.ai/tjung2/temporal_questions/runs/voc7h397
Some weights of T5ForConditionalGeneration were not initialized from the model checkpoint at google/t5-large-ssm and are newly initialized: ['enc_kadapter.adapter.3.encoder.layer.1.DenseReluDense.wi.weight', 'enc_kadapter.adapter.2.encoder.layer.0.SelfAttention.v.weight', 'enc_kadapter.adapter.0.up_project.bias', 'enc_kadapter.adapter.1.encoder.layer.0.SelfAttention.relative_attention_bias.weight', 'enc_kadapter.adapter.1.encoder.layer.1.DenseReluDense.wo.weight', 'enc_kadapter.adapter.3.down_project.bias', 'enc_kadapter.adapter.5.encoder.layer.0.SelfAttention.v.weight', 'enc_kadapter.adapter.4.encoder.layer.0.SelfAttention.relative_attention_bias.weight', 'enc_kadapter.adapter.2.encoder.layer.1.DenseReluDense.wo.weight', 'enc_kadapter.adapter.3.encoder.layer.0.SelfAttention.q.weight', 'enc_kadapter.adapter.2.encoder.layer.0.SelfAttention.q.weight', 'enc_kadapter.adapter.5.encoder.layer.1.DenseReluDense.wi.weight', 'enc_kadapter.adapter.3.encoder.layer.1.DenseReluDense.wo.weight', 'enc_kadapter.adapter.3.encoder.layer.0.SelfAttention.k.weight', 'enc_kadapter.adapter.4.encoder.layer.0.SelfAttention.o.weight', 'enc_kadapter.adapter.3.encoder.layer.1.layer_norm.weight', 'enc_kadapter.adapter.4.encoder.layer.0.layer_norm.weight', 'enc_kadapter.adapter.0.encoder.layer.1.DenseReluDense.wo.weight', 'enc_kadapter.adapter.5.up_project.weight', 'enc_kadapter.adapter.2.encoder.layer.0.SelfAttention.k.weight', 'enc_kadapter.adapter.1.encoder.layer.1.DenseReluDense.wi.weight', 'enc_kadapter.adapter.4.encoder.layer.1.DenseReluDense.wi.weight', 'enc_kadapter.adapter.1.encoder.layer.0.SelfAttention.v.weight', 'enc_kadapter.adapter.5.encoder.layer.0.SelfAttention.q.weight', 'enc_kadapter.adapter.5.encoder.layer.1.layer_norm.weight', 'enc_kadapter.adapter.0.encoder.layer.0.SelfAttention.relative_attention_bias.weight', 'enc_kadapter.adapter.5.encoder.layer.0.SelfAttention.k.weight', 'enc_kadapter.adapter.2.encoder.layer.1.DenseReluDense.wi.weight', 'enc_kadapter.pool.bias', 'enc_kadapter.adapter.0.encoder.layer.1.DenseReluDense.wi.weight', 'enc_kadapter.adapter.4.encoder.layer.0.SelfAttention.v.weight', 'enc_kadapter.adapter.3.encoder.layer.0.SelfAttention.relative_attention_bias.weight', 'enc_kadapter.adapter.3.encoder.layer.0.layer_norm.weight', 'enc_kadapter.adapter.0.encoder.layer.0.SelfAttention.q.weight', 'enc_kadapter.adapter.2.down_project.weight', 'enc_kadapter.adapter.4.encoder.layer.1.layer_norm.weight', 'enc_kadapter.adapter.4.down_project.weight', 'enc_kadapter.adapter.5.encoder.layer.0.SelfAttention.o.weight', 'enc_kadapter.adapter.5.encoder.layer.0.SelfAttention.relative_attention_bias.weight', 'enc_kadapter.adapter.3.up_project.bias', 'enc_kadapter.adapter.2.encoder.layer.0.SelfAttention.relative_attention_bias.weight', 'enc_kadapter.adapter.5.encoder.layer.1.DenseReluDense.wo.weight', 'enc_kadapter.layer_norm.weight', 'enc_kadapter.adapter.1.encoder.layer.0.SelfAttention.q.weight', 'enc_kadapter.adapter.2.encoder.layer.1.layer_norm.weight', 'enc_kadapter.adapter.0.encoder.layer.0.SelfAttention.k.weight', 'enc_kadapter.adapter.5.down_project.weight', 'enc_kadapter.adapter.4.down_project.bias', 'enc_kadapter.adapter.0.up_project.weight', 'enc_kadapter.adapter.0.encoder.layer.0.SelfAttention.o.weight', 'enc_kadapter.adapter.2.down_project.bias', 'enc_kadapter.adapter.3.encoder.layer.0.SelfAttention.v.weight', 'enc_kadapter.adapter.4.up_project.bias', 'enc_kadapter.adapter.0.encoder.layer.1.layer_norm.weight', 'enc_kadapter.adapter.3.encoder.layer.0.SelfAttention.o.weight', 'enc_kadapter.pool.weight', 'enc_kadapter.adapter.1.encoder.layer.1.layer_norm.weight', 'enc_kadapter.adapter.3.down_project.weight', 'enc_kadapter.adapter.4.encoder.layer.1.DenseReluDense.wo.weight', 'enc_kadapter.adapter.2.encoder.layer.0.SelfAttention.o.weight', 'enc_kadapter.adapter.1.down_project.bias', 'enc_kadapter.adapter.1.encoder.layer.0.layer_norm.weight', 'enc_kadapter.adapter.1.encoder.layer.0.SelfAttention.o.weight', 'enc_kadapter.adapter.2.up_project.weight', 'enc_kadapter.adapter.2.up_project.bias', 'enc_kadapter.adapter.1.down_project.weight', 'enc_kadapter.adapter.0.encoder.layer.0.layer_norm.weight', 'enc_kadapter.adapter.0.down_project.weight', 'enc_kadapter.adapter.5.encoder.layer.0.layer_norm.weight', 'enc_kadapter.adapter.1.encoder.layer.0.SelfAttention.k.weight', 'enc_kadapter.adapter.0.encoder.layer.0.SelfAttention.v.weight', 'enc_kadapter.adapter.4.encoder.layer.0.SelfAttention.q.weight', 'enc_kadapter.adapter.1.up_project.weight', 'enc_kadapter.adapter.5.up_project.bias', 'enc_kadapter.adapter.4.encoder.layer.0.SelfAttention.k.weight', 'enc_kadapter.adapter.5.down_project.bias', 'enc_kadapter.adapter.4.up_project.weight', 'enc_kadapter.adapter.0.down_project.bias', 'enc_kadapter.adapter.3.up_project.weight', 'enc_kadapter.adapter.2.encoder.layer.0.layer_norm.weight', 'enc_kadapter.adapter.1.up_project.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
GPU available: True, used: True
TPU available: False, using: 0 TPU cores
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
checkpoint path = outputs/wmtbaseline_full/epoch=0-f1_score=0.2586-em_score=0.2194.ckpt
Namespace(accelerator='ddp', adam_epsilon=1e-08, adapter_config={'adapter_list': [1, 12, 21, 22, 23, 24], 'adapter_hidden_size': 128, 'adapter_enc_dec': None, 'pool_size': None}, adapter_enc_dec=None, adapter_hidden_size=128, adapter_list=[1, 12, 21, 22, 23, 24], check_validation_only=False, checkpoint_dir='outputs/wmtbaseline_full', checkpoint_path='outputs/wmtbaseline_full/epoch=0-f1_score=0.2586-em_score=0.2194.ckpt', dataset='wmt', dataset_version='2007', early_stop_callback=False, eval_batch_size=32, find_lr=False, freeze_embeds=False, freeze_encoder=False, freeze_level=2, learning_rate=0.001, max_grad_norm=0.5, max_input_length=100, max_output_length=50, method='kadapter', mode='pretrain', model_name_or_path='google/t5-large-ssm', n_gpu=1, n_test=-1, n_train=-1, n_val=-1, num_train_epochs=1, num_workers=4, opt_level='O1', output_dir='outputs/wmtkadapter_2007_2freeze_11221222324_128', output_log=None, pool_size=None, prefix=True, resume_from_checkpoint=None, seed=42, split=0, split_num=1, t5_learning_rate=None, tokenizer_name_or_path='google/t5-large-ssm', train_batch_size=32, use_deepspeed=False, use_lr_scheduling=True, val_check_interval=500, val_data='2007', wandb_log=True, warmup_steps=0, weight_decay=0.0)
T5Config {
  "_name_or_path": "google/t5-large-ssm",
  "architectures": [
    "T5ForConditionalGeneration"
  ],
  "d_ff": 4096,
  "d_kv": 64,
  "d_model": 1024,
  "decoder_start_token_id": 0,
  "dropout_rate": 0.1,
  "eos_token_id": 1,
  "feed_forward_proj": "relu",
  "initializer_factor": 1.0,
  "is_encoder_decoder": true,
  "layer_norm_epsilon": 1e-06,
  "model_type": "t5",
  "num_decoder_layers": 24,
  "num_heads": 16,
  "num_layers": 24,
  "output_past": true,
  "pad_token_id": 0,
  "relative_attention_num_buckets": 32,
  "transformers_version": "4.12.3",
  "use_cache": true,
  "vocab_size": 32128
}

T5Config {
  "_name_or_path": "google/t5-large-ssm",
  "adapter_enc_dec": null,
  "adapter_hidden_size": 128,
  "adapter_list": [
    1,
    12,
    21,
    22,
    23,
    24
  ],
  "architectures": [
    "T5ForConditionalGeneration"
  ],
  "d_ff": 4096,
  "d_kv": 64,
  "d_model": 1024,
  "decoder_start_token_id": 0,
  "dropout_rate": 0.1,
  "eos_token_id": 1,
  "feed_forward_proj": "relu",
  "initializer_factor": 1.0,
  "is_encoder_decoder": true,
  "layer_norm_epsilon": 1e-06,
  "model_type": "t5",
  "num_decoder_layers": 24,
  "num_heads": 16,
  "num_layers": 24,
  "output_past": true,
  "pad_token_id": 0,
  "pool_size": null,
  "relative_attention_num_buckets": 32,
  "transformers_version": "4.12.3",
  "use_cache": false,
  "vocab_size": 32128
}

hparams.learning_rate = 0.001
split is 0
wandb: Waiting for W&B process to finish... (failed 1). Press Control-C to abort syncing.
wandb: - 0.001 MB of 0.001 MB uploaded (0.000 MB deduped)wandb: \ 0.001 MB of 0.001 MB uploaded (0.000 MB deduped)wandb: | 0.001 MB of 0.019 MB uploaded (0.000 MB deduped)wandb: / 0.019 MB of 0.019 MB uploaded (0.000 MB deduped)wandb: - 0.019 MB of 0.019 MB uploaded (0.000 MB deduped)wandb: \ 0.019 MB of 0.019 MB uploaded (0.000 MB deduped)wandb: | 0.019 MB of 0.019 MB uploaded (0.000 MB deduped)wandb: / 0.019 MB of 0.019 MB uploaded (0.000 MB deduped)wandb: - 0.019 MB of 0.019 MB uploaded (0.000 MB deduped)wandb: \ 0.019 MB of 0.019 MB uploaded (0.000 MB deduped)wandb:                                                                                
wandb: Synced kadapter_2007: https://wandb.ai/tjung2/temporal_questions/runs/voc7h397
wandb: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)
wandb: Find logs at: ./wandb/run-20221103_051513-voc7h397/logs
Traceback (most recent call last):
  File "run.py", line 265, in <module>
    main()
  File "run.py", line 255, in main
    trainer.fit(model)
  File "/mmfs1/gscratch/ark/tjung2/miniconda3/envs/ckl/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py", line 460, in fit
    self._run(model)
  File "/mmfs1/gscratch/ark/tjung2/miniconda3/envs/ckl/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py", line 717, in _run
    self.accelerator.setup(self, model)  # note: this sets up self.lightning_module
  File "/mmfs1/gscratch/ark/tjung2/miniconda3/envs/ckl/lib/python3.8/site-packages/pytorch_lightning/accelerators/gpu.py", line 41, in setup
    return super().setup(trainer, model)
  File "/mmfs1/gscratch/ark/tjung2/miniconda3/envs/ckl/lib/python3.8/site-packages/pytorch_lightning/accelerators/accelerator.py", line 92, in setup
    self.setup_optimizers(trainer)
  File "/mmfs1/gscratch/ark/tjung2/miniconda3/envs/ckl/lib/python3.8/site-packages/pytorch_lightning/accelerators/accelerator.py", line 374, in setup_optimizers
    optimizers, lr_schedulers, optimizer_frequencies = self.training_type_plugin.init_optimizers(
  File "/mmfs1/gscratch/ark/tjung2/miniconda3/envs/ckl/lib/python3.8/site-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 190, in init_optimizers
    return trainer.init_optimizers(model)
  File "/mmfs1/gscratch/ark/tjung2/miniconda3/envs/ckl/lib/python3.8/site-packages/pytorch_lightning/trainer/optimizers.py", line 34, in init_optimizers
    optim_conf = model.configure_optimizers()
  File "/mmfs1/gscratch/ark/tjung2/continual-knowledge-learning/models/T5_Model.py", line 482, in configure_optimizers
    len_data = len(self.train_dataloader())
  File "/mmfs1/gscratch/ark/tjung2/continual-knowledge-learning/models/T5_Model.py", line 500, in train_dataloader
    train_dataset = self.get_dataset(tokenizer=self.tokenizer, type_path="train", num_samples=n_samples, args=self.hparams)
  File "/mmfs1/gscratch/ark/tjung2/continual-knowledge-learning/models/T5_Model.py", line 256, in get_dataset
    dataset = Pretrain(tokenizer=tokenizer, type_path=type_path, num_samples=num_samples,  input_length=args.max_input_length,
  File "/mmfs1/gscratch/ark/tjung2/continual-knowledge-learning/Datasets.py", line 27, in __init__
    raise Exception(f'Provided the correct dataset version among {dataset_v}')
Exception: Provided the correct dataset version among ['small', 'full', 'debug', 'full_diff', '2018-', '2019+', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020']
wandb: Currently logged in as: tjung2. Use `wandb login --relogin` to force relogin
wandb: wandb version 0.13.4 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.13.1
wandb: Run data is saved locally in /mmfs1/gscratch/ark/tjung2/continual-knowledge-learning/wandb/run-20221103_054851-1ctbs8bh
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run kadapter_2008
wandb: ‚≠êÔ∏è View project at https://wandb.ai/tjung2/temporal_questions
wandb: üöÄ View run at https://wandb.ai/tjung2/temporal_questions/runs/1ctbs8bh
Some weights of T5ForConditionalGeneration were not initialized from the model checkpoint at google/t5-large-ssm and are newly initialized: ['enc_kadapter.adapter.0.encoder.layer.0.layer_norm.weight', 'enc_kadapter.adapter.3.encoder.layer.0.SelfAttention.o.weight', 'enc_kadapter.layer_norm.weight', 'enc_kadapter.adapter.0.encoder.layer.1.DenseReluDense.wi.weight', 'enc_kadapter.adapter.4.encoder.layer.1.DenseReluDense.wo.weight', 'enc_kadapter.adapter.1.encoder.layer.0.SelfAttention.k.weight', 'enc_kadapter.adapter.4.encoder.layer.0.SelfAttention.v.weight', 'enc_kadapter.adapter.4.encoder.layer.0.SelfAttention.relative_attention_bias.weight', 'enc_kadapter.adapter.0.encoder.layer.1.DenseReluDense.wo.weight', 'enc_kadapter.adapter.4.up_project.weight', 'enc_kadapter.adapter.5.encoder.layer.1.DenseReluDense.wi.weight', 'enc_kadapter.adapter.4.encoder.layer.0.SelfAttention.o.weight', 'enc_kadapter.adapter.3.encoder.layer.1.DenseReluDense.wi.weight', 'enc_kadapter.adapter.1.encoder.layer.0.SelfAttention.o.weight', 'enc_kadapter.adapter.4.down_project.weight', 'enc_kadapter.adapter.4.encoder.layer.0.SelfAttention.q.weight', 'enc_kadapter.adapter.3.encoder.layer.1.DenseReluDense.wo.weight', 'enc_kadapter.adapter.2.down_project.bias', 'enc_kadapter.adapter.1.up_project.bias', 'enc_kadapter.adapter.3.up_project.bias', 'enc_kadapter.adapter.3.encoder.layer.0.SelfAttention.k.weight', 'enc_kadapter.adapter.1.down_project.bias', 'enc_kadapter.adapter.2.up_project.bias', 'enc_kadapter.adapter.0.encoder.layer.0.SelfAttention.v.weight', 'enc_kadapter.adapter.2.encoder.layer.0.SelfAttention.v.weight', 'enc_kadapter.adapter.2.encoder.layer.0.SelfAttention.q.weight', 'enc_kadapter.adapter.5.encoder.layer.1.layer_norm.weight', 'enc_kadapter.adapter.1.encoder.layer.0.SelfAttention.v.weight', 'enc_kadapter.pool.bias', 'enc_kadapter.adapter.3.down_project.weight', 'enc_kadapter.adapter.0.encoder.layer.0.SelfAttention.k.weight', 'enc_kadapter.adapter.5.encoder.layer.0.SelfAttention.k.weight', 'enc_kadapter.adapter.0.down_project.bias', 'enc_kadapter.adapter.5.down_project.weight', 'enc_kadapter.adapter.2.down_project.weight', 'enc_kadapter.adapter.3.encoder.layer.0.SelfAttention.q.weight', 'enc_kadapter.adapter.5.encoder.layer.0.SelfAttention.q.weight', 'enc_kadapter.adapter.5.encoder.layer.0.SelfAttention.relative_attention_bias.weight', 'enc_kadapter.adapter.4.up_project.bias', 'enc_kadapter.adapter.2.encoder.layer.0.SelfAttention.k.weight', 'enc_kadapter.adapter.5.up_project.bias', 'enc_kadapter.adapter.5.encoder.layer.1.DenseReluDense.wo.weight', 'enc_kadapter.adapter.4.down_project.bias', 'enc_kadapter.adapter.1.up_project.weight', 'enc_kadapter.adapter.0.encoder.layer.0.SelfAttention.q.weight', 'enc_kadapter.adapter.4.encoder.layer.1.layer_norm.weight', 'enc_kadapter.adapter.2.encoder.layer.0.layer_norm.weight', 'enc_kadapter.adapter.3.up_project.weight', 'enc_kadapter.adapter.2.encoder.layer.1.DenseReluDense.wi.weight', 'enc_kadapter.adapter.5.up_project.weight', 'enc_kadapter.adapter.5.encoder.layer.0.SelfAttention.v.weight', 'enc_kadapter.adapter.5.encoder.layer.0.layer_norm.weight', 'enc_kadapter.adapter.3.down_project.bias', 'enc_kadapter.adapter.3.encoder.layer.0.SelfAttention.relative_attention_bias.weight', 'enc_kadapter.adapter.1.encoder.layer.0.layer_norm.weight', 'enc_kadapter.adapter.1.encoder.layer.0.SelfAttention.q.weight', 'enc_kadapter.adapter.2.encoder.layer.1.DenseReluDense.wo.weight', 'enc_kadapter.adapter.0.encoder.layer.0.SelfAttention.o.weight', 'enc_kadapter.adapter.3.encoder.layer.1.layer_norm.weight', 'enc_kadapter.adapter.1.encoder.layer.0.SelfAttention.relative_attention_bias.weight', 'enc_kadapter.adapter.4.encoder.layer.0.SelfAttention.k.weight', 'enc_kadapter.pool.weight', 'enc_kadapter.adapter.0.up_project.bias', 'enc_kadapter.adapter.0.encoder.layer.1.layer_norm.weight', 'enc_kadapter.adapter.5.encoder.layer.0.SelfAttention.o.weight', 'enc_kadapter.adapter.2.encoder.layer.0.SelfAttention.relative_attention_bias.weight', 'enc_kadapter.adapter.2.encoder.layer.1.layer_norm.weight', 'enc_kadapter.adapter.3.encoder.layer.0.layer_norm.weight', 'enc_kadapter.adapter.0.encoder.layer.0.SelfAttention.relative_attention_bias.weight', 'enc_kadapter.adapter.4.encoder.layer.1.DenseReluDense.wi.weight', 'enc_kadapter.adapter.1.down_project.weight', 'enc_kadapter.adapter.0.up_project.weight', 'enc_kadapter.adapter.2.up_project.weight', 'enc_kadapter.adapter.0.down_project.weight', 'enc_kadapter.adapter.4.encoder.layer.0.layer_norm.weight', 'enc_kadapter.adapter.2.encoder.layer.0.SelfAttention.o.weight', 'enc_kadapter.adapter.3.encoder.layer.0.SelfAttention.v.weight', 'enc_kadapter.adapter.1.encoder.layer.1.layer_norm.weight', 'enc_kadapter.adapter.1.encoder.layer.1.DenseReluDense.wi.weight', 'enc_kadapter.adapter.1.encoder.layer.1.DenseReluDense.wo.weight', 'enc_kadapter.adapter.5.down_project.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
GPU available: True, used: True
TPU available: False, using: 0 TPU cores
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
checkpoint path = outputs/wmtbaseline_full/epoch=0-f1_score=0.2586-em_score=0.2194.ckpt
Namespace(accelerator='ddp', adam_epsilon=1e-08, adapter_config={'adapter_list': [1, 12, 21, 22, 23, 24], 'adapter_hidden_size': 128, 'adapter_enc_dec': None, 'pool_size': None}, adapter_enc_dec=None, adapter_hidden_size=128, adapter_list=[1, 12, 21, 22, 23, 24], check_validation_only=False, checkpoint_dir='outputs/wmtbaseline_full', checkpoint_path='outputs/wmtbaseline_full/epoch=0-f1_score=0.2586-em_score=0.2194.ckpt', dataset='wmt', dataset_version='2008', early_stop_callback=False, eval_batch_size=32, find_lr=False, freeze_embeds=False, freeze_encoder=False, freeze_level=2, learning_rate=0.001, max_grad_norm=0.5, max_input_length=100, max_output_length=50, method='kadapter', mode='pretrain', model_name_or_path='google/t5-large-ssm', n_gpu=1, n_test=-1, n_train=-1, n_val=-1, num_train_epochs=1, num_workers=4, opt_level='O1', output_dir='outputs/wmtkadapter_2008_2freeze_11221222324_128', output_log=None, pool_size=None, prefix=True, resume_from_checkpoint=None, seed=42, split=0, split_num=1, t5_learning_rate=None, tokenizer_name_or_path='google/t5-large-ssm', train_batch_size=32, use_deepspeed=False, use_lr_scheduling=True, val_check_interval=500, val_data='2008', wandb_log=True, warmup_steps=0, weight_decay=0.0)
T5Config {
  "_name_or_path": "google/t5-large-ssm",
  "architectures": [
    "T5ForConditionalGeneration"
  ],
  "d_ff": 4096,
  "d_kv": 64,
  "d_model": 1024,
  "decoder_start_token_id": 0,
  "dropout_rate": 0.1,
  "eos_token_id": 1,
  "feed_forward_proj": "relu",
  "initializer_factor": 1.0,
  "is_encoder_decoder": true,
  "layer_norm_epsilon": 1e-06,
  "model_type": "t5",
  "num_decoder_layers": 24,
  "num_heads": 16,
  "num_layers": 24,
  "output_past": true,
  "pad_token_id": 0,
  "relative_attention_num_buckets": 32,
  "transformers_version": "4.12.3",
  "use_cache": true,
  "vocab_size": 32128
}

T5Config {
  "_name_or_path": "google/t5-large-ssm",
  "adapter_enc_dec": null,
  "adapter_hidden_size": 128,
  "adapter_list": [
    1,
    12,
    21,
    22,
    23,
    24
  ],
  "architectures": [
    "T5ForConditionalGeneration"
  ],
  "d_ff": 4096,
  "d_kv": 64,
  "d_model": 1024,
  "decoder_start_token_id": 0,
  "dropout_rate": 0.1,
  "eos_token_id": 1,
  "feed_forward_proj": "relu",
  "initializer_factor": 1.0,
  "is_encoder_decoder": true,
  "layer_norm_epsilon": 1e-06,
  "model_type": "t5",
  "num_decoder_layers": 24,
  "num_heads": 16,
  "num_layers": 24,
  "output_past": true,
  "pad_token_id": 0,
  "pool_size": null,
  "relative_attention_num_buckets": 32,
  "transformers_version": "4.12.3",
  "use_cache": false,
  "vocab_size": 32128
}

hparams.learning_rate = 0.001
split is 0
wandb: Waiting for W&B process to finish... (failed 1). Press Control-C to abort syncing.
wandb: - 0.001 MB of 0.001 MB uploaded (0.000 MB deduped)wandb: \ 0.001 MB of 0.001 MB uploaded (0.000 MB deduped)wandb: | 0.001 MB of 0.019 MB uploaded (0.000 MB deduped)wandb: / 0.001 MB of 0.019 MB uploaded (0.000 MB deduped)wandb: - 0.019 MB of 0.019 MB uploaded (0.000 MB deduped)wandb: \ 0.019 MB of 0.019 MB uploaded (0.000 MB deduped)wandb: | 0.019 MB of 0.019 MB uploaded (0.000 MB deduped)wandb: / 0.019 MB of 0.019 MB uploaded (0.000 MB deduped)wandb: - 0.019 MB of 0.019 MB uploaded (0.000 MB deduped)wandb: \ 0.019 MB of 0.019 MB uploaded (0.000 MB deduped)wandb:                                                                                
wandb: Synced kadapter_2008: https://wandb.ai/tjung2/temporal_questions/runs/1ctbs8bh
wandb: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)
wandb: Find logs at: ./wandb/run-20221103_054851-1ctbs8bh/logs
Traceback (most recent call last):
  File "run.py", line 265, in <module>
    main()
  File "run.py", line 255, in main
    trainer.fit(model)
  File "/mmfs1/gscratch/ark/tjung2/miniconda3/envs/ckl/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py", line 460, in fit
    self._run(model)
  File "/mmfs1/gscratch/ark/tjung2/miniconda3/envs/ckl/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py", line 717, in _run
    self.accelerator.setup(self, model)  # note: this sets up self.lightning_module
  File "/mmfs1/gscratch/ark/tjung2/miniconda3/envs/ckl/lib/python3.8/site-packages/pytorch_lightning/accelerators/gpu.py", line 41, in setup
    return super().setup(trainer, model)
  File "/mmfs1/gscratch/ark/tjung2/miniconda3/envs/ckl/lib/python3.8/site-packages/pytorch_lightning/accelerators/accelerator.py", line 92, in setup
    self.setup_optimizers(trainer)
  File "/mmfs1/gscratch/ark/tjung2/miniconda3/envs/ckl/lib/python3.8/site-packages/pytorch_lightning/accelerators/accelerator.py", line 374, in setup_optimizers
    optimizers, lr_schedulers, optimizer_frequencies = self.training_type_plugin.init_optimizers(
  File "/mmfs1/gscratch/ark/tjung2/miniconda3/envs/ckl/lib/python3.8/site-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 190, in init_optimizers
    return trainer.init_optimizers(model)
  File "/mmfs1/gscratch/ark/tjung2/miniconda3/envs/ckl/lib/python3.8/site-packages/pytorch_lightning/trainer/optimizers.py", line 34, in init_optimizers
    optim_conf = model.configure_optimizers()
  File "/mmfs1/gscratch/ark/tjung2/continual-knowledge-learning/models/T5_Model.py", line 482, in configure_optimizers
    len_data = len(self.train_dataloader())
  File "/mmfs1/gscratch/ark/tjung2/continual-knowledge-learning/models/T5_Model.py", line 500, in train_dataloader
    train_dataset = self.get_dataset(tokenizer=self.tokenizer, type_path="train", num_samples=n_samples, args=self.hparams)
  File "/mmfs1/gscratch/ark/tjung2/continual-knowledge-learning/models/T5_Model.py", line 256, in get_dataset
    dataset = Pretrain(tokenizer=tokenizer, type_path=type_path, num_samples=num_samples,  input_length=args.max_input_length,
  File "/mmfs1/gscratch/ark/tjung2/continual-knowledge-learning/Datasets.py", line 27, in __init__
    raise Exception(f'Provided the correct dataset version among {dataset_v}')
Exception: Provided the correct dataset version among ['small', 'full', 'debug', 'full_diff', '2018-', '2019+', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020']
